#1. ui folder:
Will contain reusable UI components (like: buttons, inputs...).
Mostly they are just presentational and don't contain side effects.

#2. services folder:     
This folder is for reusable code for interacting with API.

#3. utils folder: 
These are helper functions that we can also reuse in multiple places of the application.
Reusable and stateless helper functions that don't create any side effects (like: date or number manipulations...).

#4 A whole new way of Routing:
This is the recommended router for all React Router web projects to work with powerful APIs like Data Loader, Data Actions or Data Fetchers.

Example: App.jsx

#5. Architecture of App Layout:
So, the Header and Footer would stay the same across the whole application, only Main will change according to pages (like: Cart, Menu or Order...).

#6. Nested Routes:
The AppLayout.jsx is a 'parent Route' of all routes, inside it we have <Outlet /> which is the placeholder for 'child routes'. The 'child routes' are in the 'children' property of the 'router'. Now they are nested routes.

<AppLayout /> - since it doesn't have a 'path', it is technically called 'Layout Route'.

Example: App.jsx file

#7. Fetching data with React Router:
Three steps:
1. create a loader function
2. connect the loader function with the route
3. provide the data to the page (by using custom hook => useLoaderData())

useLoaderData() - helps to get the data into the component.

Can be placed anywhere in the code base, but convention is to place loader for the data of the certain page inside the file of that page. Loader function must return whatever data it wants to provide to a page.

Rendering a page and fetching data happens at the same time.

Example: step_1. Menu.jsx, step_2. App.jsx, step_3. Menu.jsx

#8. Global Navigation State:
useNavigation() - shows a global loading indicator, no matter what data is being loaded.

Example: AppLayout.jsx file